#ifndef _METALLIC_CMATH
#define _METALLIC_CMATH

#include <math.h>

#if __cplusplus >= 201103L
#include <type_traits>
#endif

namespace std {

using ::fabs;
using ::fmod;

using ::exp;
using ::log;
using ::log10;

using ::pow;
using ::sqrt;

using ::sin;
using ::cos;
using ::tan;
using ::asin;
using ::acos;
using ::atan;
using ::atan2;

using ::sinh;
using ::cosh;
using ::tanh;

using ::ceil;
using ::floor;

using ::frexp;
using ::ldexp;
using ::modf;

inline float fabs(float __x)
{
    return ::fabsf(__x);
}

inline long double fabs(long double __x)
{
    return ::fabsl(__x);
}

inline float abs(float __x)
{
    return ::fabsf(__x);
}

inline double abs(double __x)
{
    return ::fabs(__x);
}

inline long double abs(long double __x)
{
    return ::fabsl(__x);
}

inline float fmod(float __x, float __y)
{
    return ::fmodf(__x, __y);
}

inline long double fmod(long double __x, long double __y)
{
    return ::fmodl(__x, __y);
}

inline float exp(float __x)
{
    return ::expf(__x);
}

inline long double exp(long double __x)
{
    return ::expl(__x);
}

inline float log(float __x)
{
    return ::logf(__x);
}

inline long double log(long double __x)
{
    return ::logl(__x);
}

inline float log10(float __x)
{
    return ::log10f(__x);
}

inline long double log10(long double __x)
{
    return ::log10l(__x);
}

inline float pow(float __x, float __y)
{
    return ::powf(__x, __y);
}

inline long double pow(long double __x, long double __y)
{
    return ::powl(__x, __y);
}

inline float sqrt(float __x)
{
    return ::sqrtf(__x);
}

inline long double sqrt(long double __x)
{
    return ::sqrtl(__x);
}

inline float sin(float __x)
{
    return ::sinf(__x);
}

inline long double sin(long double __x)
{
    return ::sinl(__x);
}

inline float cos(float __x)
{
    return ::cosf(__x);
}

inline long double cos(long double __x)
{
    return ::cosl(__x);
}

inline float tan(float __x)
{
    return ::tanf(__x);
}

inline long double tan(long double __x)
{
    return ::tanl(__x);
}

inline float asin(float __x)
{
    return ::asinf(__x);
}

inline long double asin(long double __x)
{
    return ::asinl(__x);
}

inline float acos(float __x)
{
    return ::acosf(__x);
}

inline long double acos(long double __x)
{
    return ::acosl(__x);
}

inline float atan(float __x)
{
    return ::atanf(__x);
}

inline long double atan(long double __x)
{
    return ::atanl(__x);
}

inline float atan2(float __y, float __x)
{
    return ::atan2f(__y, __x);
}

inline long double atan2(long double __y, long double __x)
{
    return ::atan2l(__y, __x);
}

inline float sinh(float __x)
{
    return ::sinhf(__x);
}

inline long double sinh(long double __x)
{
    return ::sinhl(__x);
}

inline float cosh(float __x)
{
    return ::coshf(__x);
}

inline long double cosh(long double __x)
{
    return ::coshl(__x);
}

inline float tanh(float __x)
{
    return ::tanhf(__x);
}

inline long double tanh(long double __x)
{
    return ::tanhl(__x);
}

inline float ceil(float __x)
{
    return ::ceilf(__x);
}

inline long double ceil(long double __x)
{
    return ::ceill(__x);
}

inline float floor(float __x)
{
    return ::floorf(__x);
}

inline long double floor(long double __x)
{
    return ::floorl(__x);
}

inline float frexp(float __x, int* __exp)
{
    return ::frexpf(__x, __exp);
}

inline long double frexp(long double __x, int* __exp)
{
    return ::frexpl(__x, __exp);
}

inline float ldexp(float __x, int __exp)
{
    return ::ldexpf(__x, __exp);
}

inline long double ldexp(long double __x, int __exp)
{
    return ::ldexpl(__x, __exp);
}

inline float modf(float __x, float* __i)
{
    return ::modff(__x, __i);
}

inline long double modf(long double __x, long double* __i)
{
    return ::modfl(__x, __i);
}

#if __cplusplus >= 201103L
template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
fabs(_T __x)
{
    return ::fabs(__x);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
fmod(_T __x, _U __y)
{
    return ::fmod(__x, __y);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
exp(_T __x)
{
    return ::exp(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
log(_T __x)
{
    return ::log(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
log10(_T __x)
{
    return ::log10(__x);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
pow(_T __x, _U __y)
{
    return ::pow(__x, __y);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
sqrt(_T __x)
{
    return ::sqrt(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
sin(_T __x)
{
    return ::sin(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
cos(_T __x)
{
    return ::cos(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
tan(_T __x)
{
    return ::tan(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
asin(_T __x)
{
    return ::asin(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
acos(_T __x)
{
    return ::acos(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
atan(_T __x)
{
    return ::atan(__x);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
atan2(_T __y, _U __x)
{
    return ::atan2(__y, __x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
sinh(_T __x)
{
    return ::sinh(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
cosh(_T __x)
{
    return ::cosh(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
tanh(_T __x)
{
    return ::tanh(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
ceil(_T __x)
{
    return __x;
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
floor(_T __x)
{
    return __x;
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
frexp(_T __x, int* __exp)
{
    return ::frexp(__x, __exp);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
ldexp(_T __x, int __exp)
{
    return ::ldexp(__x, __exp);
}

using ::remainder;
using ::remquo;
using ::fma;
using ::fmax;
using ::fmin;
using ::fdim;

using ::nanf;
using ::nan;
using ::nanl;

using ::exp2;
using ::expm1;
using ::log2;
using ::log1p;

using ::cbrt;
using ::hypot;

using ::asinh;
using ::acosh;
using ::atanh;

using ::erf;
using ::erfc;
using ::tgamma;
using ::lgamma;

using ::trunc;
using ::nearbyint;

using ::round;
using ::lround;
using ::llround;

using ::rint;
using ::lrint;
using ::llrint;

using ::scalbn;
using ::scalbln;
using ::ilogb;
using ::logb;
using ::nextafter;
using ::nexttoward;
using ::copysign;

inline float remainder(float __x, float __y)
{
    return ::remainderf(__x, __y);
}

inline long double remainder(long double __x, long double __y)
{
    return ::remainderl(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
remainder(_T __x, _U __y)
{
    return ::remainder(__x, __y);
}

inline float remquo(float __x, float __y, int* __q)
{
    return ::remquof(__x, __y, __q);
}

inline long double remquo(long double __x, long double __y, int* __q)
{
    return ::remquol(__x, __y, __q);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
remquo(_T __x, _U __y, int* __q)
{
    return ::remquo(__x, __y, __q);
}

inline float fma(float __x, float __y, float __a)
{
    return ::fmaf(__x, __y, __a);
}

inline long double fma(long double __x, long double __y, long double __a)
{
    return ::fmal(__x, __y, __a);
}

template<typename _T, typename _U, typename _V>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value && is_integral<_V>::value, double>::type
fma(_T __x, _U __y, _V __a)
{
    return ::fma(__x, __y, __a);
}

inline float fmax(float __x, float __y)
{
    return ::fmaxf(__x, __y);
}

inline long double fmax(long double __x, long double __y)
{
    return ::fmaxl(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
fmax(_T __x, _U __y)
{
    return ::fmax(__x, __y);
}

inline float fmin(float __x, float __y)
{
    return ::fminf(__x, __y);
}

inline long double fmin(long double __x, long double __y)
{
    return ::fminl(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
fmin(_T __x, _U __y)
{
    return ::fmin(__x, __y);
}

inline float fdim(float __x, float __y)
{
    return ::fdimf(__x, __y);
}

inline long double fdim(long double __x, long double __y)
{
    return ::fdiml(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
fdim(_T __x, _U __y)
{
    return ::fdim(__x, __y);
}

inline float exp2(float __x)
{
    return ::exp2f(__x);
}

inline long double exp2(long double __x)
{
    return ::exp2l(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
exp2(_T __x)
{
    return ::exp2(__x);
}

inline float expm1(float __x)
{
    return ::expm1f(__x);
}

inline long double expm1(long double __x)
{
    return ::expm1l(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
expm1(_T __x)
{
    return ::expm1(__x);
}

inline float log2(float __x)
{
    return ::log2f(__x);
}

inline long double log2(long double __x)
{
    return ::log2l(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
log2(_T __x)
{
    return ::log2(__x);
}

inline float log1p(float __x)
{
    return ::log1pf(__x);
}

inline long double log1p(long double __x)
{
    return ::log1pl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
log1p(_T __x)
{
    return ::log1p(__x);
}

inline float cbrt(float __x)
{
    return ::cbrtf(__x);
}

inline long double cbrt(long double __x)
{
    return ::cbrtl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
cbrt(_T __x)
{
    return ::cbrt(__x);
}

inline float hypot(float __x, float __y)
{
    return ::hypotf(__x, __y);
}

inline long double hypot(long double __x, long double __y)
{
    return ::hypotl(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
hypot(_T __x, _U __y)
{
    return ::hypot(__x, __y);
}

inline float asinh(float __x)
{
    return ::asinhf(__x);
}

inline long double asinh(long double __x)
{
    return ::asinhl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
asinh(_T __x)
{
    return ::asinh(__x);
}

inline float acosh(float __x)
{
    return ::acoshf(__x);
}

inline long double acosh(long double __x)
{
    return ::acoshl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
acosh(_T __x)
{
    return ::acosh(__x);
}

inline float atanh(float __x)
{
    return ::atanhf(__x);
}

inline long double atanh(long double __x)
{
    return ::atanhl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
atanh(_T __x)
{
    return ::atanh(__x);
}

inline float erf(float __x)
{
    return ::erff(__x);
}

inline long double erf(long double __x)
{
    return ::erfl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
erf(_T __x)
{
    return ::erf(__x);
}

inline float erfc(float __x)
{
    return ::erfcf(__x);
}

inline long double erfc(long double __x)
{
    return ::erfcl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
erfc(_T __x)
{
    return ::erfc(__x);
}

inline float tgamma(float __x)
{
    return ::tgammaf(__x);
}

inline long double tgamma(long double __x)
{
    return ::tgammal(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
tgamma(_T __x)
{
    return ::tgamma(__x);
}

inline float lgamma(float __x)
{
    return ::lgammaf(__x);
}

inline long double lgamma(long double __x)
{
    return ::lgammal(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
lgamma(_T __x)
{
    return ::lgamma(__x);
}

inline float trunc(float __x)
{
    return ::truncf(__x);
}

inline long double trunc(long double __x)
{
    return ::truncl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
trunc(_T __x)
{
    return __x;
}

inline float nearbyint(float __x)
{
    return ::nearbyintf(__x);
}

inline long double nearbyint(long double __x)
{
    return ::nearbyintl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
nearbyint(_T __x)
{
    return __x;
}

inline float round(float __x)
{
    return ::roundf(__x);
}

inline long double round(long double __x)
{
    return ::roundl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
round(_T __x)
{
    return __x;
}

inline long lround(float __x)
{
    return ::lroundf(__x);
}

inline long lround(long double __x)
{
    return ::lroundl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, long>::type
lround(_T __x)
{
    return __x;
}

inline long long llround(float __x)
{
    return ::llroundf(__x);
}

inline long long llround(long double __x)
{
    return ::llroundl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, long long>::type
llround(_T __x)
{
    return __x;
}

inline float rint(float __x)
{
    return ::rintf(__x);
}

inline long double rint(long double __x)
{
    return ::rintl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
rint(_T __x)
{
    return __x;
}

inline long lrint(float __x)
{
    return ::lrintf(__x);
}

inline long lrint(long double __x)
{
    return ::lrintl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, long>::type
lrint(_T __x)
{
    return __x;
}

inline long long llrint(float __x)
{
    return ::llrintf(__x);
}

inline long long llrint(long double __x)
{
    return ::llrintl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, long long>::type
llrint(_T __x)
{
    return __x;
}

inline float scalbn(float __x, int __exp)
{
    return ::scalbnf(__x, __exp);
}

inline long double scalbn(long double __x, int __exp)
{
    return ::scalbnl(__x, __exp);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
scalbn(_T __x, int __exp)
{
    return ::scalbn(__x, __exp);
}

inline int ilogb(float __x)
{
    return ::ilogbf(__x);
}

inline int ilogb(long double __x)
{
    return ::ilogbl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, int>::type
ilogb(_T __x)
{
    return ::ilogb(__x);
}

inline float logb(float __x)
{
    return ::logbf(__x);
}

inline long double logb(long double __x)
{
    return ::logbl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
logb(_T __x)
{
    return ::logb(__x);
}

inline float nextafter(float __x, float __y)
{
    return ::nextafterf(__x, __y);
}

inline long double nextafter(long double __x, long double __y)
{
    return ::nextafterl(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
nextafter(_T __x, _U __y)
{
    return ::nextafter(__x, __y);
}

inline float nexttoward(float __x, long double __y)
{
    return ::nexttowardf(__x, __y);
}

inline long double nexttoward(long double __x, long double __y)
{
    return ::nexttowardl(__x, __y);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
nexttoward(_T __x, long double __y)
{
    return ::nexttoward(__x, __y);
}

inline float copysign(float __x, float __y)
{
    return ::copysignf(__x, __y);
}

inline long double copysign(long double __x, long double __y)
{
    return ::copysignl(__x, __y);
}

template<typename _T, typename _U>
typename enable_if<is_integral<_T>::value && is_integral<_U>::value, double>::type
copysign(_T __x, _U __y)
{
    return ::copysign(__x, __y);
}

template<typename _T>
typename enable_if<is_floating_point<_T>::value, int>::type
fpclassify(_T __x)
{
    return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, __x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, int>::type
fpclassify(_T __x)
{
    return __x ? FP_NORMAL : FP_ZERO;
}

template<typename _T>
typename enable_if<is_floating_point<_T>::value, bool>::type
isfinite(_T __x)
{
    return __builtin_isfinite(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, bool>::type
isfinite(_T __x)
{
    return true;
}

template<typename _T>
typename enable_if<is_floating_point<_T>::value, bool>::type
isinf(_T __x)
{
    return __builtin_isinf(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, bool>::type
isinf(_T __x)
{
    return false;
}

template<typename _T>
typename enable_if<is_floating_point<_T>::value, bool>::type
isnan(_T __x)
{
    return __builtin_isnan(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, bool>::type
isnan(_T __x)
{
    return false;
}

template<typename _T>
typename enable_if<is_floating_point<_T>::value, bool>::type
isnormal(_T __x)
{
    return __builtin_isnormal(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, bool>::type
isnormal(_T __x)
{
    return true;
}

inline bool signbit(float __x)
{
    return __builtin_signbitf(__x);
}

inline bool signbit(double __x)
{
    return __builtin_signbit(__x);
}

inline bool signbit(long double __x)
{
    return __builtin_signbitl(__x);
}

template<typename _T>
typename enable_if<is_integral<_T>::value, bool>::type
signbit(_T __x)
{
    const _T __c0 = ~_T();
    const _T __n1 = -1;

    if (__c0 == __n1)
        return __x < 0;
    else
        return signbit(static_cast<double>(__x));
}

template<typename _T>
typename enable_if<is_integral<_T>::value, double>::type
__promote(_T __x)
{
    return __x;
}

template<typename _T>
typename enable_if<is_floating_point<_T>::value, _T>::type
__promote(_T __x)
{
    return __x;
}

template<typename _T, typename _U>
typename enable_if<is_arithmetic<_T>::value && is_arithmetic<_U>::value, bool>::type
isgreater(_T __x, _U __y)
{
    return __builtin_isgreater(__promote(__x), __promote(__y));
}

template<typename _T, typename _U>
typename enable_if<is_arithmetic<_T>::value && is_arithmetic<_U>::value, bool>::type
isgreaterequal(_T __x, _U __y)
{
    return __builtin_isgreaterequal(__promote(__x), __promote(__y));
}

template<typename _T, typename _U>
typename enable_if<is_arithmetic<_T>::value && is_arithmetic<_U>::value, bool>::type
isless(_T __x, _U __y)
{
    return __builtin_isless(__promote(__x), __promote(__y));
}

template<typename _T, typename _U>
typename enable_if<is_arithmetic<_T>::value && is_arithmetic<_U>::value, bool>::type
islessequal(_T __x, _U __y)
{
    return __builtin_islessequal(__promote(__x), __promote(__y));
}

template<typename _T, typename _U>
typename enable_if<is_arithmetic<_T>::value && is_arithmetic<_U>::value, bool>::type
islessgreater(_T __x, _U __y)
{
    return __builtin_islessgreater(__promote(__x), __promote(__y));
}

template<typename _T, typename _U>
typename enable_if<is_arithmetic<_T>::value && is_arithmetic<_U>::value, bool>::type
isunordered(_T __x, _U __y)
{
    return __builtin_isunordered(__promote(__x), __promote(__y));
}
#endif // C++11

} // namespace std

#endif // <cmath>

// vim: ft=cpp

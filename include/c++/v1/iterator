#ifndef _METALLIC_ITERATOR
#define _METALLIC_ITERATOR

#if __cplusplus >= 201103L
#include <type_traits>
#endif

namespace std {

struct input_iterator_tag
{};

struct output_iterator_tag
{};

struct forward_iterator_tag
  : input_iterator_tag
{};

struct bidirectional_iterator_tag
  : forward_iterator_tag
{};

struct random_access_iterator_tag
  : bidirectional_iterator_tag
{};

template<typename _Iterator, typename = void>
struct __iterator_traits_base
#if __cplusplus >= 201103L
{};

template<typename _Iterator>
struct __iterator_traits_base<_Iterator, __void_t<
    typename _Iterator::difference_type,
    typename _Iterator::value_type,
    typename _Iterator::pointer,
    typename _Iterator::reference,
    typename _Iterator::iterator_category>>
#endif
{
    typedef typename _Iterator::difference_type difference_type;
    typedef typename _Iterator::value_type value_type;
    typedef typename _Iterator::pointer pointer;
    typedef typename _Iterator::reference reference;
    typedef typename _Iterator::iterator_category iterator_category;
};

template<typename _Iterator>
struct iterator_traits
  : __iterator_traits_base<_Iterator>
{};

typedef __PTRDIFF_TYPE__ ptrdiff_t;

template<typename _T>
struct iterator_traits<_T*>
{
    typedef ptrdiff_t difference_type;
    typedef _T value_type;
    typedef _T* pointer;
    typedef _T& reference;
    typedef random_access_iterator_tag iterator_category;
};

template<typename _T>
struct iterator_traits<const _T*>
{
    typedef ptrdiff_t difference_type;
    typedef _T value_type;
    typedef const _T* pointer;
    typedef const _T& reference;
    typedef random_access_iterator_tag iterator_category;
};

template<typename _Iterator>
_Iterator __unwrap(_Iterator __it)
{
    return __it;
}

template<typename _Iterator>
class __wrapped
{
private:
    _Iterator __it;

    explicit __wrapped(_Iterator __x)
      : __it(__x)
    {}

public:
    typedef typename iterator_traits<_Iterator>::difference_type difference_type;
    typedef typename iterator_traits<_Iterator>::value_type value_type;
    typedef _Iterator pointer;
    typedef typename iterator_traits<_Iterator>::reference reference;
    typedef typename iterator_traits<_Iterator>::iterator_category iterator_category;

    __wrapped()
    {}

    _Iterator base() const
    {
        return __it;
    }

    reference operator*() const
    {
        return *__it;
    }

    pointer operator->() const
    {
        return __it;
    }

    reference operator[](difference_type __n) const
    {
        return __it[__n];
    }

    __wrapped operator+(difference_type __n) const
    {
        __wrapped __result(__it + __n);
        return __result;
    }

    __wrapped operator-(difference_type __n) const
    {
        __wrapped __result(__it - __n);
        return __result;
    }

    __wrapped& operator++()
    {
        ++__it;
        return *this;
    }

    __wrapped operator++(int)
    {
        __wrapped __result(__it++);
        return __result;
    }

    __wrapped& operator--()
    {
        --__it;
        return *this;
    }

    __wrapped operator--(int)
    {
        __wrapped __result(__it--);
        return __result;
    }

    __wrapped& operator+=(difference_type __n)
    {
        __it += __n;
        return *this;
    }

    __wrapped& operator-=(difference_type __n)
    {
        __it -= __n;
        return *this;
    }

    template<typename, typename, typename>
    friend class basic_string;

    template<typename, typename>
    friend class vector;
};

template<typename _Iterator>
_Iterator __unwrap(__wrapped<_Iterator> __it)
{
    return __it.base();
}

template<typename _Iterator>
class reverse_iterator
{
protected:
    _Iterator current;

public:
    typedef typename iterator_traits<_Iterator>::difference_type difference_type;
    typedef typename iterator_traits<_Iterator>::value_type value_type;
    typedef typename iterator_traits<_Iterator>::pointer pointer;
    typedef typename iterator_traits<_Iterator>::reference reference;
    typedef typename iterator_traits<_Iterator>::iterator_category iterator_category;

    reverse_iterator()
    {}

    explicit reverse_iterator(_Iterator __x)
      : current(__x)
    {}

    template<typename _Other>
    reverse_iterator(const reverse_iterator<_Other>& __other)
      : current(__other.base())
    {}

    template<typename _Other>
    reverse_iterator& operator=(const reverse_iterator<_Other>& __other)
    {
        current = __other.base();
    }

    _Iterator base() const
    {
        return current;
    }

    reference operator*() const
    {
        _Iterator __base = current;
        return *--__base;
    }

    _Iterator operator->() const
    {
        _Iterator __base = current;
        return --__base;
    }

    reference operator[](difference_type __n) const
    {
        return current[-__n - 1];
    }

    reverse_iterator operator+(difference_type __n) const
    {
        reverse_iterator __result(current - __n);
        return __result;
    }

    reverse_iterator operator-(difference_type __n) const
    {
        reverse_iterator __result(current + __n);
        return __result;
    }

    reverse_iterator& operator++()
    {
        --current;
        return *this;
    }

    reverse_iterator operator++(int)
    {
        reverse_iterator __result(current--);
        return __result;
    }

    reverse_iterator& operator--()
    {
        --current;
        return *this;
    }

    reverse_iterator operator--(int)
    {
        reverse_iterator __result(current++);
        return __result;
    }

    reverse_iterator& operator+=(difference_type __n)
    {
        current -= __n;
        return *this;
    }

    reverse_iterator& operator-=(difference_type __n)
    {
        current += __n;
        return *this;
    }
};

#if __cplusplus >= 201402L
template<typename _Iterator>
reverse_iterator<_Iterator> make_reverse_iterator(_Iterator __x)
{
    reverse_iterator<_Iterator> __it(__x);
    return __it;
}
#endif

template<typename _T, typename _U>
bool operator==(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y)
{
    return __x.base() == __y.base();
}

template<typename _T, typename _U>
bool operator!=(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y)
{
    return __x.base() != __y.base();
}

template<typename _T, typename _U>
bool operator<(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y)
{
    return __x.base() > __y.base();
}

template<typename _T, typename _U>
bool operator<=(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y)
{
    return __x.base() >= __y.base();
}

template<typename _T, typename _U>
bool operator>(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y)
{
    return __x.base() < __y.base();
}

template<typename _T, typename _U>
bool operator>=(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y)
{
    return __x.base() <= __y.base();
}

template<typename _Iterator>
reverse_iterator<_Iterator> operator+(
    typename reverse_iterator<_Iterator>::difference_type __n,
    const reverse_iterator<_Iterator>& __it)
{
    return __it + __n;
}

#if __cplusplus >= 201103L
template<typename _T, typename _U>
auto operator-(const reverse_iterator<_T>& __x, const reverse_iterator<_U>& __y) -> decltype(__y.base() - __x.base())
{
    return __y.base() - __x.base();
}
#else
template<typename _Iterator>
reverse_iterator<_Iterator> operator-(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
{
    return __y.base() - __x.base();
}
#endif

#if __cplusplus >= 201103L
template<typename _Iterator>
class move_iterator
{
private:
    _Iterator __current;

public:
    typedef _Iterator iterator_type;
    typedef typename iterator_traits<_Iterator>::difference_type difference_type;
    typedef typename iterator_traits<_Iterator>::value_type value_type;
    typedef _Iterator pointer;
    typedef value_type&& reference;
    typedef typename iterator_traits<_Iterator>::iterator_category iterator_category;

    move_iterator()
    {}

    explicit move_iterator(_Iterator __x)
      : __current(__x)
    {}

    template<typename _Other>
    move_iterator(const move_iterator<_Other>& __other)
      : __current(__other.base())
    {}

    template<typename _Other>
    move_iterator& operator=(const move_iterator<_Other>& __other)
    {
        __current = __other.base();
    }

    _Iterator base() const
    {
        return __current;
    }

    reference operator*() const
    {
        return static_cast<reference>(*__current);
    }

    pointer operator->() const
    {
        return __current;
    }

    reference operator[](difference_type __n) const
    {
        return static_cast<reference>(__current[__n]);
    }

    move_iterator operator+(difference_type __n) const
    {
        move_iterator __result(__current + __n);
        return __result;
    }

    move_iterator operator-(difference_type __n) const
    {
        move_iterator __result(__current - __n);
        return __result;
    }

    move_iterator& operator++()
    {
        ++__current;
        return *this;
    }

    move_iterator operator++(int)
    {
        move_iterator __result(__current++);
        return __result;
    }

    move_iterator& operator--()
    {
        --__current;
        return *this;
    }

    move_iterator operator--(int)
    {
        move_iterator __result(__current--);
        return __result;
    }

    move_iterator& operator+=(difference_type __n)
    {
        __current += __n;
        return *this;
    }

    move_iterator& operator-=(difference_type __n)
    {
        __current -= __n;
        return *this;
    }
};

template<typename _Iterator>
move_iterator<_Iterator> make_move_iterator(_Iterator __x)
{
    move_iterator<_Iterator> __it(__x);
    return __it;
}

template<typename _T, typename _U>
bool operator==(const move_iterator<_T>& __x, const move_iterator<_U>& __y)
{
    return __x.base() == __y.base();
}

template<typename _T, typename _U>
bool operator!=(const move_iterator<_T>& __x, const move_iterator<_U>& __y)
{
    return __x.base() != __y.base();
}

template<typename _T, typename _U>
bool operator<(const move_iterator<_T>& __x, const move_iterator<_U>& __y)
{
    return __x.base() < __y.base();
}

template<typename _T, typename _U>
bool operator<=(const move_iterator<_T>& __x, const move_iterator<_U>& __y)
{
    return __x.base() <= __y.base();
}

template<typename _T, typename _U>
bool operator>(const move_iterator<_T>& __x, const move_iterator<_U>& __y)
{
    return __x.base() > __y.base();
}

template<typename _T, typename _U>
bool operator>=(const move_iterator<_T>& __x, const move_iterator<_U>& __y)
{
    return __x.base() >= __y.base();
}

template<typename _Iterator>
move_iterator<_Iterator> operator+(
    typename move_iterator<_Iterator>::difference_type __n,
    const move_iterator<_Iterator>& __it)
{
    return __it + __n;
}

template<typename _T, typename _U>
auto operator-(const move_iterator<_T>& __x, const move_iterator<_U>& __y) -> decltype(__x.base() - __y.base())
{
    return __x.base() - __y.base();
}
#endif

template<typename _Container>
class back_insert_iterator
{
protected:
    _Container* container;

public:
    typedef _Container container_type;

    typedef void difference_type;
    typedef void value_type;
    typedef void pointer;
    typedef void reference;
    typedef output_iterator_tag iterator_category;

    explicit back_insert_iterator(_Container& __container)
      : container(&__container)
    {}

#if __cplusplus >= 201103L
    back_insert_iterator& operator=(typename _Container::value_type const& __value)
    {
        container->push_back(__value);
        return *this;
    }

    back_insert_iterator& operator=(typename _Container::value_type&& __value)
    {
        container->push_back(__value);
        return *this;
    }
#else
    back_insert_iterator& operator=(typename _Container::const_reference __value)
    {
        container->push_back(__value);
        return *this;
    }
#endif

    back_insert_iterator& operator*()
    {
        return *this;
    }

    back_insert_iterator& operator++()
    {
        return *this;
    }

    back_insert_iterator& operator++(int)
    {
        return *this;
    }
};

template<typename _Container>
back_insert_iterator<_Container> back_inserter(_Container& __container)
{
    back_insert_iterator<_Container> __it(__container);
    return __it;
}

template<typename _Container>
class front_insert_iterator
{
protected:
    _Container* container;

public:
    typedef _Container container_type;

    typedef void difference_type;
    typedef void value_type;
    typedef void pointer;
    typedef void reference;
    typedef output_iterator_tag iterator_category;

    explicit front_insert_iterator(_Container& __container)
      : container(&__container)
    {}

#if __cplusplus >= 201103L
    front_insert_iterator& operator=(typename _Container::value_type const& __value)
    {
        container->push_front(__value);
        return *this;
    }

    front_insert_iterator& operator=(typename _Container::value_type&& __value)
    {
        container->push_front(__value);
        return *this;
    }
#else
    front_insert_iterator& operator=(typename _Container::const_reference __value)
    {
        container->push_front(__value);
        return *this;
    }
#endif

    front_insert_iterator& operator*()
    {
        return *this;
    }

    front_insert_iterator& operator++()
    {
        return *this;
    }

    front_insert_iterator& operator++(int)
    {
        return *this;
    }
};

template<typename _Container>
front_insert_iterator<_Container> front_inserter(_Container& __container)
{
    front_insert_iterator<_Container> __it(__container);
    return __it;
}

template<typename _Container>
class insert_iterator
{
protected:
    _Container* container;
    typename _Container::iterator iter;

public:
    typedef _Container container_type;

    typedef void difference_type;
    typedef void value_type;
    typedef void pointer;
    typedef void reference;
    typedef output_iterator_tag iterator_category;

    explicit insert_iterator(_Container& __container, typename _Container::iterator __it)
      : container(&__container),
        iter(__it)
    {}

#if __cplusplus >= 201103L
    insert_iterator& operator=(typename _Container::value_type const& __value)
    {
        container->insert(iter, __value);
        return *this;
    }

    insert_iterator& operator=(typename _Container::value_type&& __value)
    {
        container->insert(iter, __value);
        return *this;
    }
#else
    insert_iterator& operator=(typename _Container::const_reference __value)
    {
        container->insert(iter, __value);
        return *this;
    }
#endif

    insert_iterator& operator*()
    {
        return *this;
    }

    insert_iterator& operator++()
    {
        return *this;
    }

    insert_iterator& operator++(int)
    {
        return *this;
    }
};

template<typename _Container>
insert_iterator<_Container> inserter(_Container& __container, typename _Container::iterator __it)
{
    insert_iterator<_Container> __inserter(__container, __it);
    return __inserter;
}

template<typename _Iterator, typename _Distance>
void __advance(_Iterator& __it, _Distance __n, input_iterator_tag)
{
    while (__n--)
        ++__it;
}

template<typename _Iterator, typename _Distance>
void __advance(_Iterator& __it, _Distance __n, bidirectional_iterator_tag)
{
    for (; __n > 0; --__n)
        ++__it;

    for (; __n < 0; ++__n)
        --__it;
}

template<typename _Iterator, typename _Distance>
void __advance(_Iterator& __it, _Distance __n, random_access_iterator_tag)
{
    __it += __n;
}

template<typename _Iterator, typename _Distance>
void advance(_Iterator& __it, _Distance __n)
{
    __advance(__it, __n, iterator_traits<_Iterator>::iterator_category());
}

template<typename _Iterator, typename _Distance>
typename iterator_traits<_Iterator>::difference_type __distance(_Iterator __first, _Iterator __last, input_iterator_tag)
{
    typename iterator_traits<_Iterator>::difference_type __n = 0;

    for (; __first != __last; ++__first)
        ++__n;

    return __n;
}

template<typename _Iterator, typename _Distance>
typename iterator_traits<_Iterator>::difference_type __distance(_Iterator __first, _Iterator __last, random_access_iterator_tag)
{
    return __last - __first;
}

template<typename _Iterator>
typename iterator_traits<_Iterator>::difference_type distance(_Iterator __first, _Iterator __last)
{
    return __distance(__first, __last, iterator_traits<_Iterator>::iterator_category());
}

} // namespace std

#endif // <iterator>

// vim: ft=cpp

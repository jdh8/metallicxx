#ifndef _METALLIC_OPTIONAL
#define _METALLIC_OPTIONAL

#include <bits/sfinae>
#include <exception>
#include <new>
#include <type_traits>
#include <utility>

namespace std {

struct nullopt_t
{
    struct _Tag {};

    explicit constexpr nullopt_t(_Tag) {}
};

inline constexpr nullopt_t nullopt { nullopt_t::_Tag{} };

struct bad_optional_access : exception
{
    ~bad_optional_access() noexcept override = default;

    const char* what() const noexcept override
    {
        return "bad optional access";
    }
};

template<typename _T, bool = is_trivially_destructible<_T>::value>
struct __optional_destruct_base
{
    class _Empty {};

    union
    {
        _Empty __state;
        _T __value;
    };

    bool __engaged;

    constexpr __optional_destruct_base() noexcept
      : __state(),
        __engaged(false)
    {}

    template<typename... _Args>
    constexpr explicit __optional_destruct_base(in_place_t, _Args&&... __args)
      : __value(static_cast<_Args&&>(__args)...),
        __engaged(true)
    {}

    void reset() noexcept
    {
        __engaged = false;
    }
};

template<typename _T>
struct __optional_destruct_base<_T, false>
{
    class _Empty {};

    union
    {
        _Empty __state;
        _T __value;
    };

    bool __engaged;

    constexpr __optional_destruct_base() noexcept
      : __state(),
        __engaged(false)
    {}

    template<typename... _Args>
    constexpr explicit __optional_destruct_base(in_place_t, _Args&&... __args)
      : __value(static_cast<_Args&&>(__args)...),
        __engaged(true)
    {}

    ~__optional_destruct_base()
    {
        if (__engaged)
            __value.~_T();
    }

    void reset() noexcept
    {
        if (__engaged) {
            __engaged = false;
            __value.~_T();
        }
    }
};

template<typename _T>
struct __optional_storage_base : __optional_destruct_base<_T>
{
    using __optional_destruct_base<_T>::__optional_destruct_base;

    constexpr explicit operator bool() const noexcept
    {
        return this->__engaged;
    }

    constexpr _T& operator*() & noexcept
    {
        return this->__value;
    }

    constexpr const _T& operator*() const& noexcept
    {
        return this->__value;
    }

    constexpr _T&& operator*() && noexcept
    {
        return this->__value;
    }

    constexpr const _T&& operator*() const&& noexcept
    {
        return this->__value;
    }

    template<typename... _Args>
    void __emplace(_Args&&... __args)
    {
        static_cast<void>(::new((void*)__builtin_addressof(this->__value)) _T(static_cast<_Args&&>(__args)...));
        this->__engaged = true;
    }

    template<typename _Other>
    void __construct(_Other&& __other)
    {
        if (__other)
            __emplace(*static_cast<_Other&&>(__other));
    }

    template<typename _Other>
    void __assign(_Other&& __other)
    {
        if (__other) {
            if (this->__engaged)
                this->__value = *static_cast<_Other&&>(__other);
            else
                __emplace(*static_cast<_Other&&>(__other));
        }
        else {
            this->reset();
        }
    }
};

template<typename _T, bool = is_trivially_copy_constructible<_T>::value>
struct __optional_copy_base : __optional_storage_base<_T>
{
    using __optional_storage_base<_T>::__optional_storage_base;
};

template<typename _T>
struct __optional_copy_base<_T, false> : __optional_storage_base<_T>
{
    using __optional_storage_base<_T>::__optional_storage_base;

    __optional_copy_base() = default;

    __optional_copy_base(const __optional_copy_base& __other)
        noexcept(is_nothrow_copy_constructible<_T>::value)
    {
        this->__construct(__other);
    }

    __optional_copy_base(__optional_copy_base&&) = default;
    __optional_copy_base& operator=(const __optional_copy_base&) = default;
    __optional_copy_base& operator=(__optional_copy_base&&) = default;
};

template<typename _T, bool = is_trivially_move_constructible<_T>::value>
struct __optional_move_base : __optional_copy_base<_T>
{
    using __optional_copy_base<_T>::__optional_copy_base;
};

template<typename _T>
struct __optional_move_base<_T, false> : __optional_copy_base<_T>
{
    using __optional_copy_base<_T>::__optional_copy_base;

    __optional_move_base() = default;
    __optional_move_base(const __optional_move_base&) = default;

    __optional_move_base(__optional_move_base&& __other)
        noexcept(is_nothrow_move_constructible<_T>::value)
    {
        this->__construct(static_cast<__optional_move_base&&>(__other));
    }

    __optional_move_base& operator=(const __optional_move_base&) = default;
    __optional_move_base& operator=(__optional_move_base&&) = default;
};

template<typename _T, bool =
    is_trivially_destructible<_T>::value && 
    is_trivially_copy_constructible<_T>::value && 
    is_trivially_copy_assignable<_T>::value>
struct __optional_copy_assign_base : __optional_move_base<_T>
{
    using __optional_move_base<_T>::__optional_move_base;
};

template<typename _T>
struct __optional_copy_assign_base<_T, false> : __optional_move_base<_T>
{
    using __optional_move_base<_T>::__optional_move_base;

    __optional_copy_assign_base() = default;
    __optional_copy_assign_base(const __optional_copy_assign_base&) = default;
    __optional_copy_assign_base(__optional_copy_assign_base&&) = default;

    __optional_copy_assign_base& operator=(const __optional_copy_assign_base& __other)
        noexcept(is_nothrow_copy_assignable<_T>::value)
    {
        this->__assign(__other);
        return *this;
    }

    __optional_copy_assign_base& operator=(__optional_copy_assign_base&&) = default;
};

template<typename _T, bool =
    is_trivially_destructible<_T>::value && 
    is_trivially_move_constructible<_T>::value && 
    is_trivially_move_assignable<_T>::value>
struct __optional_move_assign_base : __optional_copy_assign_base<_T>
{
    using __optional_copy_assign_base<_T>::__optional_copy_assign_base;
};

template<typename _T>
struct __optional_move_assign_base<_T, false> : __optional_copy_assign_base<_T>
{
    using __optional_copy_assign_base<_T>::__optional_copy_assign_base;

    __optional_move_assign_base() = default;
    __optional_move_assign_base(const __optional_move_assign_base&) = default;
    __optional_move_assign_base(__optional_move_assign_base&&) = default;
    __optional_move_assign_base& operator=(const __optional_move_assign_base&) = default;

    __optional_move_assign_base& operator=(__optional_move_assign_base&& __other)
        noexcept(is_nothrow_move_assignable<_T>::value)
    {
        this->__assign(static_cast<__optional_move_assign_base&&>(__other));
        return *this;
    }
};

template<typename _T>
class __optional_base : public __optional_move_assign_base<_T>
{
    __sfinae_copy_constructible<is_copy_constructible<_T>::value> __a;
    __sfinae_move_constructible<is_move_constructible<_T>::value> __b;
    __sfinae_copy_assignable<is_copy_constructible<_T>::value && is_copy_assignable<_T>::value> __c;
    __sfinae_move_assignable<is_move_constructible<_T>::value && is_move_assignable<_T>::value> __d;

public:
    using __optional_move_assign_base<_T>::__optional_move_assign_base;
};

template<typename _T>
class optional : private __optional_base<_T>
{
    template<typename _U>
    static const bool _Implicit = is_constructible<_T, _U&&>::value && is_convertible<_U&&, _T>::value;

    template<typename _U>
    static const bool _Explicit = is_constructible<_T, _U&&>::value && !is_convertible<_U&&, _T>::value;

    template<typename _U>
    static const bool _Assignable = is_constructible<_T, _U>::value && is_assignable<_T&, _U>::value;

    template<typename _U>
    static const bool _IsHint = is_same<__remove_cvref_t<_U>, in_place_t>::value || is_same<__remove_cvref_t<_U>, optional>::value;
    
    template<typename _U>
    static const bool _AlreadyConstructible =
        is_constructible<_T, optional<_U>&>::value ||
        is_constructible<_T, const optional<_U>&>::value ||
        is_constructible<_T, optional<_U>&&>::value ||
        is_constructible<_T, const optional<_U>&&>::value ||
        is_convertible<optional<_U>&, _T>::value ||
        is_convertible<const optional<_U>&, _T>::value ||
        is_convertible<optional<_U>&&, _T>::value ||
        is_convertible<const optional<_U>&&, _T>::value;

    template<typename _U>
    static const bool _AlreadyAssignable = _AlreadyConstructible<_U> ||
        is_assignable<_T, optional<_U>&>::value ||
        is_assignable<_T, const optional<_U>&>::value ||
        is_assignable<_T, optional<_U>&&>::value ||
        is_assignable<_T, const optional<_U>&&>::value;

public:
    using __optional_base<_T>::operator bool;
    using __optional_base<_T>::operator*;
    using __optional_base<_T>::reset;

    constexpr optional() = default;
    constexpr optional(const optional&) = default;
    constexpr optional(optional&&) = default;

    constexpr optional(nullopt_t) noexcept {}

    template<typename _U, enable_if_t<_Implicit<const _U&> && !_AlreadyConstructible<_U>, int> = 0>
    optional(const optional<_U>& __other)
    {
        this->__construct(__other);
    }

    template<typename _U, enable_if_t<_Explicit<const _U&> && !_AlreadyConstructible<_U>, int> = 0>
    explicit optional(const optional<_U>& __other)
    {
        this->__construct(__other);
    }

    template<typename _U, enable_if_t<_Implicit<_U> && !_AlreadyConstructible<_U>, int> = 0>
    optional(optional<_U>&& __other)
    {
        this->__construct(static_cast<optional<_U>&&>(__other));
    }

    template<typename _U, enable_if_t<_Explicit<_U> && !_AlreadyConstructible<_U>, int> = 0>
    explicit optional(optional<_U>&& __other)
    {
        this->__construct(static_cast<optional<_U>&&>(__other));
    }

    template<typename... _Args, enable_if_t<is_constructible<_T, _Args&&...>::value, int> = 0>
    constexpr explicit optional(in_place_t, _Args&&... __args)
      : __optional_base<_T>(in_place, static_cast<_Args&&>(__args)...)
    {}

    template<typename _U, typename... _Args,
        enable_if_t<is_constructible<_T, initializer_list<_U>&, _Args&&...>::value, int> = 0>
    constexpr explicit optional(in_place_t, initializer_list<_U> __il, _Args&&... __args)
      : __optional_base<_T>(in_place, __il, static_cast<_Args&&>(__args)...)
    {}

    template<typename _U = _T, enable_if_t<_Implicit<_U> && !_IsHint<_U>, int> = 0>
    constexpr optional(_U&& __value)
      : __optional_base<_T>(in_place, static_cast<_U&&>(__value))
    {}

    template<typename _U, enable_if_t<_Explicit<_U> && !_IsHint<_U>, int> = 0>
    constexpr explicit optional(_U&& __value)
      : __optional_base<_T>(in_place, static_cast<_U&&>(__value))
    {}

    optional& operator=(const optional&) = default;
    optional& operator=(optional&&) = default;

    optional& operator=(nullopt_t) noexcept
    {
        reset();
        return *this;
    }

    template<typename _U>
    enable_if_t<
        _Assignable<_U> &&
        !is_same<__remove_cvref_t<_U>, optional>::value &&
        (!is_scalar<_T>::value || !is_same<__remove_cvref_t<_U>, _T>::value),
    optional&> operator=(_U&& __value)
    {
        if (*this)
            **this = static_cast<_U&&>(__value);
        else
            this->__emplace(static_cast<_U&&>(__value));

        return *this;
    }

    template<typename _U>
    enable_if_t<_Assignable<const _U&> && !_AlreadyAssignable<_U>, optional&>
    operator=(const optional<_U>& __other)
    {
        this->__assign(__other);
    }

    template<typename _U>
    enable_if_t<_Assignable<_U> && !_AlreadyAssignable<_U>, optional&>
    operator=(optional<_U>&& __other)
    {
        this->__assign(static_cast<optional<_U>&&>(__other));
    }

    constexpr const _T* operator->() const
    {
        return __builtin_addressof(**this);
    }

    constexpr _T* operator->()
    {
        return __builtin_addressof(**this);
    }

    constexpr bool has_value() const noexcept
    {
        return !!*this;
    }

    constexpr _T& value() &
    {
        if (*this)
            return operator*();

        throw bad_optional_access();
    }

    constexpr const _T& value() const&
    {
        if (*this)
            return operator*();

        throw bad_optional_access();
    }

    constexpr _T&& value() &&
    {
        if (*this)
            return operator*();

        throw bad_optional_access();
    }

    constexpr const _T&& value() const&&
    {
        if (*this)
            return operator*();

        throw bad_optional_access();
    }

    template<typename _U>
    constexpr _T value_or(_U&& __fallback) const&
    {
        return *this ? operator*() : static_cast<_T>(static_cast<_U&&>(__fallback));
    }

    template<typename _U>
    constexpr _T value_or(_U&& __fallback) &&
    {
        return *this ? operator*() : static_cast<_T>(static_cast<_U&&>(__fallback));
    }

    void swap(optional& __other)
    {
        if (*this) {
            if (__other) {
                swap(**this, *__other);
            }
            else {
                __other.__emplace(static_cast<_T&&>(**this));
                reset();
            }
        }
        else if (__other) {
            this->__emplace(static_cast<_T&&>(*__other));
            __other.reset();
        }
    }

    template<typename... _Args>
    enable_if_t<is_constructible<_T, _Args&&...>::value, _T&>
    emplace(_Args&&... __args)
    {
        reset();
        this->__emplace(static_cast<_Args&&>(__args)...);
        return **this;
    }

    template<typename _U, typename... _Args>
    enable_if_t<is_constructible<_T, initializer_list<_U>&, _Args&&...>::value, _T&>
    emplace(initializer_list<_U> __il, _Args&&... __args)
    {
        reset();
        this->__emplace(static_cast<_Args&&>(__args)...);
        return **this;
    }
};

template<typename _T>
constexpr optional<decay_t<_T>> make_optional(_T&& __x)
{
    return optional<decay_t<_T>>(static_cast<_T&&>(__x));
}

template<typename _T, typename... _Args>
constexpr optional<decay_t<_T>> make_optional(_Args&&... __args)
{
    return optional<decay_t<_T>>(in_place, static_cast<_Args&&>(__args)...);
}

template<typename _T, typename _U, typename... _Args>
constexpr optional<decay_t<_T>> make_optional(initializer_list<_U> __il, _Args&&... __args)
{
    return optional<decay_t<_T>>(in_place, __il, static_cast<_Args&&>(__args)...);
}

template<typename _T>
enable_if_t<is_move_constructible<_T>::value && is_swappable<_T>::value>
swap(optional<_T>& __x, optional<_T>& __y) noexcept(noexcept(__x.swap(__y)))
{
    __x.swap(__y);
}

template<typename _T, typename _U>
constexpr bool operator==(const optional<_T>& __x, const optional<_U>& __y)
{
    return !__x == !__y && (!__x || *__x == *__y);
}

template<typename _T, typename _U>
constexpr bool operator!=(const optional<_T>& __x, const optional<_U>& __y)
{
    return !(__x == __y);
}

template<typename _T, typename _U>
constexpr bool operator<(const optional<_T>& __x, const optional<_U>& __y)
{
    return __y && (!__x || *__x < *__y);
}

template<typename _T, typename _U>
constexpr bool operator>(const optional<_T>& __x, const optional<_U>& __y)
{
    return __y < __x;
}

template<typename _T, typename _U>
constexpr bool operator<=(const optional<_T>& __x, const optional<_U>& __y)
{
    return !(__y < __x);
}

template<typename _T, typename _U>
constexpr bool operator>=(const optional<_T>& __x, const optional<_U>& __y)
{
    return !(__x < __y);
}

template<typename _T>
constexpr bool operator==(const optional<_T>& __x, nullopt_t)
{
    return !__x;
}

template<typename _T>
constexpr bool operator!=(const optional<_T>& __x, nullopt_t)
{
    return !!__x;
}

template<typename _T>
constexpr bool operator<(const optional<_T>&, nullopt_t)
{
    return false;
}

template<typename _T>
constexpr bool operator>(const optional<_T>& __x, nullopt_t)
{
    return !!__x;
}

template<typename _T>
constexpr bool operator<=(const optional<_T>& __x, nullopt_t)
{
    return !__x;
}

template<typename _T>
constexpr bool operator>=(const optional<_T>&, nullopt_t)
{
    return true;
}

template<typename _T>
constexpr bool operator==(nullopt_t, const optional<_T>& __x)
{
    return !__x;
}

template<typename _T>
constexpr bool operator!=(nullopt_t, const optional<_T>& __x)
{
    return !!__x;
}

template<typename _T>
constexpr bool operator<(nullopt_t, const optional<_T>& __x)
{
    return !!__x;
}

template<typename _T>
constexpr bool operator>(nullopt_t, const optional<_T>&)
{
    return false;
}

template<typename _T>
constexpr bool operator<=(nullopt_t, const optional<_T>&)
{
    return true;
}

template<typename _T>
constexpr bool operator>=(nullopt_t, const optional<_T>& __x)
{
    return !__x;
}

template<typename _T, typename _U>
constexpr bool operator==(const optional<_T>& __x, const _U& __y)
{
    return __x && *__x == __y;
}

template<typename _T, typename _U>
constexpr bool operator!=(const optional<_T>& __x, const _U& __y)
{
    return !(__x == __y);
}

template<typename _T, typename _U>
constexpr bool operator<(const optional<_T>& __x, const _U& __y)
{
    return !__x || *__x < __y;
}

template<typename _T, typename _U>
constexpr bool operator>(const optional<_T>& __x, const _U& __y)
{
    return __y < __x;
}

template<typename _T, typename _U>
constexpr bool operator<=(const optional<_T>& __x, const _U& __y)
{
    return !(__y < __x);
}

template<typename _T, typename _U>
constexpr bool operator>=(const optional<_T>& __x, const _U& __y)
{
    return !(__x < __y);
}

template<typename _T, typename _U>
constexpr bool operator==(const _T& __x, const optional<_U>& __y)
{
    return __y == __x;
}

template<typename _T, typename _U>
constexpr bool operator!=(const _T& __x, const optional<_U>& __y)
{
    return __y != __x;
}

template<typename _T, typename _U>
constexpr bool operator<(const _T& __x, const optional<_U>& __y)
{
    return __y > __x;
}

template<typename _T, typename _U>
constexpr bool operator>(const _T& __x, const optional<_U>& __y)
{
    return __y < __x;
}

template<typename _T, typename _U>
constexpr bool operator<=(const _T& __x, const optional<_U>& __y)
{
    return __y >= __x;
}

template<typename _T, typename _U>
constexpr bool operator>=(const _T& __x, const optional<_U>& __y)
{
    return __y <= __x;
}

} // std

#endif // <optional>

// vim: ft=cpp

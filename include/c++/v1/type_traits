#ifndef _METALLIC_TYPE_TRAITS
#define _METALLIC_TYPE_TRAITS

namespace std {

////////////////////////// Integral constant ///////////////////////////

template<typename _T, _T __v>
struct integral_constant
{
    typedef integral_constant type;
    typedef _T value_type;

    static constexpr _T value = __v;

    constexpr operator value_type() const noexcept { return value; }

#if __cplusplus > 201103L
    constexpr value_type operator()() const noexcept { return value; }
#endif
};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

///////////////////////////// Conditionals /////////////////////////////

template<bool, typename = void>
struct enable_if
{};

template<typename _T>
struct enable_if<true, _T>
{
    typedef _T type;
};

template<bool, typename _T, typename _F>
struct conditional
{
    typedef _T type;
};

template<typename _T, typename _F>
struct conditional<false, _T, _F>
{
    typedef _F type;
};

///////////////////////// Type transformations /////////////////////////

typedef __SIZE_TYPE__ size_t;

template<typename...>
using __void_t = void;

template<typename _T>
struct add_const
{
    typedef const _T type;
};

template<typename _T>
struct add_volatile
{
    typedef volatile _T type;
};

template<typename _T>
struct add_cv
{
    typedef const volatile _T type;
};

template<typename _T>
struct remove_const
{
    typedef _T type;
};

template<typename _T>
struct remove_const<const _T>
{
    typedef _T type;
};

template<typename _T>
struct remove_volatile
{
    typedef _T type;
};

template<typename _T>
struct remove_volatile<volatile _T>
{
    typedef _T type;
};

template<typename _T>
struct remove_cv
  : remove_volatile<typename remove_const<_T>::type>
{};

template<typename _T>
struct remove_reference
{
    typedef _T type;
};

template<typename _T>
struct remove_reference<_T&>
{
    typedef _T type;
};

template<typename _T>
struct remove_reference<_T&&>
{
    typedef _T type;
};

template<typename _T>
struct __remove_cvref
  : remove_cv<typename remove_reference<_T>::type>
{};

template<typename _T, typename = void>
struct __add_lvalue_reference_base
{
    typedef _T type;
};

template<typename _T>
struct __add_lvalue_reference_base<_T, __void_t<_T&>>
{
    typedef _T& type;
};

template<typename _T>
struct add_lvalue_reference
  : __add_lvalue_reference_base<_T>
{};

template<typename _T, typename = void>
struct __add_rvalue_reference_base
{
    typedef _T type;
};

template<typename _T>
struct __add_rvalue_reference_base<_T, __void_t<_T&&>>
{
    typedef _T&& type;
};

template<typename _T>
struct add_rvalue_reference
  : __add_rvalue_reference_base<_T>
{};

template<typename _T>
struct add_pointer
{
    typedef typename remove_reference<_T>::type* type;
};

template<typename _T>
struct remove_pointer
{
    typedef _T type;
};

template<typename _T>
struct remove_pointer<_T*>
{
    typedef _T type;
};

template<typename _T>
struct remove_pointer<_T* const>
{
    typedef _T type;
};

template<typename _T>
struct remove_pointer<_T* volatile>
{
    typedef _T type;
};

template<typename _T>
struct remove_pointer<_T* const volatile>
{
    typedef _T type;
};

template<typename _T>
struct remove_extent
{
    typedef _T type;
};

template<typename _T>
struct remove_extent<_T[]>
{
    typedef _T type;
};

template<typename _T, size_t _N>
struct remove_extent<_T[_N]>
{
    typedef _T type;
};

template<typename _T>
struct remove_all_extents
{
    typedef _T type;
};

template<typename _T>
struct remove_all_extents<_T[]>
  : remove_all_extents<_T>
{};

template<typename _T, size_t _N>
struct remove_all_extents<_T[_N]>
  : remove_all_extents<_T>
{};

template<typename _T>
struct __make_signed_base
{
    typedef _T type;
};

template<>
struct __make_signed_base<bool>
{};

template<>
struct __make_signed_base<char>
{
    typedef signed char type;
};

template<>
struct __make_signed_base<unsigned char>
{
    typedef signed char type;
};

template<>
struct __make_signed_base<unsigned short>
{
    typedef short type;
};

template<>
struct __make_signed_base<unsigned>
{
    typedef int type;
};

template<>
struct __make_signed_base<unsigned long>
{
    typedef long type;
};

template<>
struct __make_signed_base<unsigned long long>
{
    typedef long long type;
};

template<typename _T>
struct __make_unsigned_base
{
    typedef _T type;
};

template<>
struct __make_unsigned_base<char>
{
    typedef unsigned char type;
};

template<>
struct __make_unsigned_base<signed char>
{
    typedef unsigned char type;
};

template<>
struct __make_unsigned_base<short>
{
    typedef unsigned short type;
};

template<>
struct __make_unsigned_base<int>
{
    typedef unsigned type;
};

template<>
struct __make_unsigned_base<long>
{
    typedef unsigned long type;
};

template<>
struct __make_unsigned_base<long long>
{
    typedef unsigned long long type;
};

#ifdef __SIZEOF_INT128__
template<>
struct __make_signed_base<unsigned __int128>
{
    typedef __int128 type;
};

template<>
struct __make_unsigned_base<__int128>
{
    typedef unsigned __int128 type;
};
#endif

template<typename _T>
struct make_signed
  : __make_signed_base<typename remove_cv<_T>::type>
{};

template<typename _T>
struct make_unsigned
  : __make_unsigned_base<typename remove_cv<_T>::type>
{};

//////////////////////////// Type identity /////////////////////////////

template<typename, typename>
struct is_same
  : false_type
{};

template<typename _T>
struct is_same<_T, _T>
  : true_type
{};

template<typename _T>
typename add_rvalue_reference<_T>::type declval() noexcept
{
    static_assert(!is_same<_T, _T>::value, "Evaluating std::declval is ill-formed C++.");
}

///////////////////////// Type classification //////////////////////////

template<typename _T>
struct is_void
  : is_same<typename remove_cv<_T>::type, void>
{};

template<typename _T>
struct __is_null_pointer
  : is_same<typename remove_cv<_T>::type, decltype(nullptr)>
{};

#if __cplusplus > 201103L
template<typename _T>
struct is_null_pointer
  : __is_null_pointer<_T>
{};
#endif

template<typename _T>
struct is_integral
  : integral_constant<bool, !is_same<typename make_signed<_T>::type, typename make_unsigned<_T>::type>::value>
{};

template<>
struct is_integral<bool>
  : true_type
{};

template<>
struct is_integral<const bool>
  : true_type
{};

template<>
struct is_integral<volatile bool>
  : true_type
{};

template<>
struct is_integral<const volatile bool>
  : true_type
{};

template<typename>
struct __is_floating_point_base
  : false_type
{};

template<>
struct __is_floating_point_base<float>
  : true_type
{};

template<>
struct __is_floating_point_base<double>
  : true_type
{};

template<>
struct __is_floating_point_base<long double>
  : true_type
{};

template<typename _T>
struct is_floating_point
  : __is_floating_point_base<typename remove_cv<_T>::type>
{};

template<typename>
struct is_array
  : false_type
{};

template<typename _T>
struct is_array<_T[]>
  : true_type
{};

template<typename _T, size_t _N>
struct is_array<_T[_N]>
  : true_type
{};

template<typename _T>
struct is_enum
  : integral_constant<bool, __is_enum(_T)>
{};

template<typename _T>
struct is_union
  : integral_constant<bool, __is_union(_T)>
{};

template<typename _T>
struct is_class
  : integral_constant<bool, __is_class(_T)>
{};

template<typename>
struct __is_function_base
  : false_type
{};

template<typename _R, typename..._Args>
struct __is_function_base<_R(_Args...)>
  : true_type
{};

template<typename _R, typename..._Args>
struct __is_function_base<_R(_Args..., ...)>
  : true_type
{};

template<typename _T>
struct is_function
  : __is_function_base<typename remove_cv<typename remove_reference<_T>::type>::type>
{};

template<typename>
struct is_lvalue_reference
  : false_type
{};

template<typename _T>
struct is_lvalue_reference<_T&>
  : true_type
{};

template<typename>
struct is_rvalue_reference
  : false_type
{};

template<typename _T>
struct is_rvalue_reference<_T&&>
  : true_type
{};

template<typename>
struct is_reference
  : false_type
{};

template<typename _T>
struct is_reference<_T&>
  : true_type
{};

template<typename _T>
struct is_reference<_T&&>
  : true_type
{};

template<typename>
struct is_pointer
  : false_type
{};

template<typename _T>
struct is_pointer<_T*>
  : true_type
{};

template<typename _T>
struct is_pointer<_T* const>
  : true_type
{};

template<typename _T>
struct is_pointer<_T* volatile>
  : true_type
{};

template<typename _T>
struct is_pointer<_T* const volatile>
  : true_type
{};

template<typename>
struct is_member_pointer
  : false_type
{};

template<typename _T, class _U>
struct is_member_pointer<_T _U::*>
  : true_type
{};

template<typename _T, class _U>
struct is_member_pointer<_T _U::* const>
  : true_type
{};

template<typename _T, class _U>
struct is_member_pointer<_T _U::* volatile>
  : true_type
{};

template<typename _T, class _U>
struct is_member_pointer<_T _U::* const volatile>
  : true_type
{};

template<typename _T>
struct is_member_function_pointer
  : integral_constant<bool, is_member_pointer<_T>::value && is_function<_T>::value>
{};

template<typename _T>
struct is_member_object_pointer
  : integral_constant<bool, is_member_pointer<_T>::value && !is_function<_T>::value>
{};

/////////////////////////// Type properties ////////////////////////////

template<typename>
struct is_const
  : false_type
{};

template<typename _T>
struct is_const<const _T>
  : true_type
{};

template<typename>
struct is_volatile
  : false_type
{};

template<typename _T>
struct is_volatile<volatile _T>
  : true_type
{};

template<typename _T>
struct is_trivial
  : integral_constant<bool, __is_trivial(_T)>
{};

template<typename _T>
struct is_trivially_copyable
  : integral_constant<bool, __is_trivially_copyable(_T)>
{};

template<typename _T>
struct is_standard_layout
  : integral_constant<bool, __is_standard_layout(_T)>
{};

template<typename _T>
struct is_pod
  : integral_constant<bool, __is_pod(_T)>
{};

template<typename _T>
struct is_literal_type
  : integral_constant<bool, __is_literal_type(_T)>
{};

template<typename _T>
struct is_empty
  : integral_constant<bool, __is_empty(_T)>
{};

template<typename _T>
struct is_polymorphic
  : integral_constant<bool, __is_polymorphic(_T)>
{};

template<typename _T>
struct is_abstract
  : integral_constant<bool, __is_abstract(_T)>
{};

/////////////////////////// Type categories ////////////////////////////

template<typename _T>
struct is_arithmetic
  : integral_constant<bool, is_integral<_T>::value || is_floating_point<_T>::value>
{};

template<typename _T>
struct is_fundamental
  : integral_constant<bool, is_arithmetic<_T>::value || is_void<_T>::value || __is_null_pointer<_T>::value>
{};

template<typename _T>
struct is_scalar
  : integral_constant<bool, is_arithmetic<_T>::value || is_enum<_T>::value
        || is_pointer<_T>::value || is_member_pointer<_T>::value || __is_null_pointer<_T>::value>
{};

template<typename _T>
struct is_object
  : integral_constant<bool, !(is_void<_T>::value || is_function<_T>::value || is_reference<_T>::value)>
{};

template<typename _T>
struct is_compound
  : integral_constant<bool, !is_fundamental<_T>::value>
{};

////////////////////////////// Signedness //////////////////////////////

template<typename _T, bool = is_arithmetic<_T>::value>
struct __is_signed_base
  : false_type
{};

template<typename _T>
struct __is_signed_base<_T, true>
  : integral_constant<bool, _T(-1) < _T(0)>
{};

template<typename _T>
struct is_signed
  : __is_signed_base<_T>
{};

template<typename _T, bool = is_arithmetic<_T>::value>
struct __is_unsigned_base
  : false_type
{};

template<typename _T>
struct __is_unsigned_base<_T, true>
  : integral_constant<bool, _T(0) < _T(-1)>
{};

template<typename _T>
struct is_unsigned
  : __is_unsigned_base<_T>
{};

////////////////////////// Special operations //////////////////////////

template<typename _Base, typename _Derived>
struct is_base_of
  : integral_constant<bool, __is_base_of(_Base, _Derived)>
{};

template<typename _From, typename _To, typename = _To>
struct __is_convertible_base
  : integral_constant<bool, is_void<_From>::value && is_void<_To>::value>
{};

template<typename _From, typename _To>
struct __is_convertible_base<_From, _To, decltype(declval<_To(_To)>()(declval<_From>()))>
  : true_type
{};

template<typename _From, typename _To>
struct is_convertible
  : __is_convertible_base<_From, _To>
{};

template<typename, typename, typename...>
struct __is_constructible_base
  : false_type
{};

template<typename _T, typename..._Args>
struct __is_constructible_base<__void_t<_T&, decltype(_T(declval<_Args>()...))>, _T, _Args...>
  : true_type
{};

template<typename _T, typename, typename = _T*>
struct __is_constructible_unary
  : false_type
{};

template<typename _T, typename _U>
struct __is_constructible_unary<_T, _U, decltype(::new _T(declval<_U>()))>
  : true_type
{};

template<typename _T, typename..._Args>
struct is_constructible
  : __is_constructible_base<void, _T, _Args...>
{};

template<typename _T, typename _U>
struct is_constructible<_T, _U>
  : __is_constructible_unary<_T, _U>
{};

template<typename _T, typename _U>
struct is_constructible<_T&, _U>
  : is_convertible<_U, _T&>
{};

template<typename _T, typename _U>
struct is_constructible<_T&&, _U>
  : is_convertible<_U, _T&&>
{};

template<typename _T, typename..._Args>
struct is_trivially_constructible
  : integral_constant<bool, __is_trivially_constructible(_T, _Args...)>
{};

template<typename _Prereq, bool = _Prereq::value>
struct __is_nothrow_constructible_base
  : false_type
{};

template<typename _T, typename..._Args>
struct __is_nothrow_constructible_base<is_constructible<_T, _Args...>, true>
  : integral_constant<bool, noexcept(_T(declval<_Args>()...))>
{};

template<typename _T, typename..._Args>
struct is_nothrow_constructible
  : __is_nothrow_constructible_base<is_constructible<_T, _Args...>>
{};

template<typename _T>
struct is_default_constructible
  : is_constructible<_T>
{};

template<typename _T>
struct is_trivially_default_constructible
  : is_trivially_constructible<_T>
{};

template<typename _T>
struct is_nothrow_default_constructible
  : is_nothrow_constructible<_T>
{};

template<typename _T>
struct is_copy_constructible
  : is_constructible<_T, typename add_lvalue_reference<const _T>::type>
{};

template<typename _T>
struct is_trivially_copy_constructible
  : is_trivially_constructible<_T, typename add_lvalue_reference<const _T>::type>
{};

template<typename _T>
struct is_nothrow_copy_constructible
  : is_nothrow_constructible<_T, typename add_lvalue_reference<const _T>::type>
{};

template<typename _T>
struct is_move_constructible
  : is_constructible<_T, typename add_rvalue_reference<_T>::type>
{};

template<typename _T>
struct is_trivially_move_constructible
  : is_trivially_constructible<_T, typename add_rvalue_reference<_T>::type>
{};

template<typename _T>
struct is_nothrow_move_constructible
  : is_nothrow_constructible<_T, typename add_rvalue_reference<_T>::type>
{};

template<typename, typename, typename = void>
struct __is_assignable_base
  : false_type
{};

template<typename _T, typename _U>
struct __is_assignable_base<_T, _U, __void_t<decltype(declval<_T>() = declval<_U>())>>
  : true_type
{};

template<typename _T, typename _U>
struct is_assignable
  : __is_assignable_base<_T, _U>
{};

template<typename _T, typename _U>
struct is_trivially_assignable
  : integral_constant<bool, __is_trivially_assignable(_T, _U)>
{};

template<typename _Prereq, bool = _Prereq::value>
struct __is_nothrow_assignable_base
  : false_type
{};

template<typename _T, typename _U>
struct __is_nothrow_assignable_base<is_assignable<_T, _U>, true>
  : integral_constant<bool, noexcept(declval<_T>() = declval<_U>())>
{};

template<typename _T, typename _U>
struct is_nothrow_assignable
  : __is_nothrow_assignable_base<is_assignable<_T, _U>>
{};

template<typename _T>
struct is_copy_assignable
  : is_assignable<typename add_lvalue_reference<_T>::type, typename add_lvalue_reference<const _T>::type>
{};

template<typename _T>
struct is_trivially_copy_assignable
  : is_trivially_assignable<typename add_lvalue_reference<_T>::type, typename add_lvalue_reference<const _T>::type>
{};

template<typename _T>
struct is_nothrow_copy_assignable
  : is_nothrow_assignable<typename add_lvalue_reference<_T>::type, typename add_lvalue_reference<const _T>::type>
{};

template<typename _T>
struct is_move_assignable
  : is_assignable<typename add_lvalue_reference<_T>::type, typename add_rvalue_reference<_T>::type>
{};

template<typename _T>
struct is_trivially_move_assignable
  : is_trivially_assignable<typename add_lvalue_reference<_T>::type, typename add_rvalue_reference<_T>::type>
{};

template<typename _T>
struct is_nothrow_move_assignable
  : is_nothrow_assignable<typename add_lvalue_reference<_T>::type, typename add_rvalue_reference<_T>::type>
{};

template<typename _T, typename = void>
struct __is_destructible_base
  : false_type
{};

template<typename _T>
struct __is_destructible_base<_T, decltype(declval<_T&>().~_T())>
  : true_type
{};

template<typename _T>
struct is_destructible
  : __is_destructible_base<typename remove_all_extents<_T>::type>
{};

template<typename _T>
struct is_destructible<_T&>
  : true_type
{};

template<typename _T>
struct is_destructible<_T&&>
  : true_type
{};

template<typename _T>
struct is_trivially_destructible
  : integral_constant<bool, is_destructible<_T>::value && __has_trivial_destructor(_T)>
{};

template<typename _Prereq, bool = _Prereq::value>
struct __is_nothrow_destructible_base
  : false_type
{};

template<typename _T>
struct __is_nothrow_destructible_base<is_destructible<_T>, true>
  : integral_constant<bool, noexcept(declval<_T&>().~_T())>
{};

template<typename _T>
struct is_nothrow_destructible
  : __is_nothrow_destructible_base<is_destructible<typename remove_all_extents<_T>::type>>
{};

template<typename _T>
struct is_nothrow_destructible<_T&>
  : true_type
{};

template<typename _T>
struct is_nothrow_destructible<_T&&>
  : true_type
{};

template<typename _T>
struct has_virtual_destructor
  : integral_constant<bool, __has_virtual_destructor(_T)>
{};

/////////////////////// Quantitative properties ////////////////////////

template<typename _T>
struct alignment_of
  : integral_constant<size_t, alignof(_T)>
{};

template<typename>
struct rank
  : integral_constant<size_t, 0>
{};

template<typename _T>
struct rank<_T[]>
  : integral_constant<size_t, rank<_T>::value + 1>
{};

template<typename _T, size_t _N>
struct rank<_T[_N]>
  : integral_constant<size_t, rank<_T>::value + 1>
{};

template<typename, unsigned _N = 0>
struct extent
  : integral_constant<size_t, 0>
{};

template<typename _T>
struct extent<_T[]>
  : integral_constant<size_t, 0>
{};

template<typename _T, unsigned _N>
struct extent<_T[], _N>
  : extent<_T, _N - 1>
{};

template<typename _T, size_t _I>
struct extent<_T[_I]>
  : integral_constant<size_t, _I>
{};

template<typename _T, size_t _I, unsigned _N>
struct extent<_T[_I], _N>
  : extent<_T, _N - 1>
{};

//////////////////////////// Miscellaneous /////////////////////////////

template<size_t _Length, size_t _Alignment>
struct aligned_storage
{
    class type { alignas(_Alignment) unsigned char __data[_Length]; };
};

template<typename..._Types>
struct __aligned_union_base
{
    static constexpr size_t alignment_value = 0;
    class type {};
};

template<typename _T, typename..._Rest>
struct __aligned_union_base<_T, _Rest...>
{
private:
    typedef __aligned_union_base<_Rest...> _Strictest;

public:
    static constexpr size_t alignment_value = alignof(_T) > _Strictest::alignment_value
        ? alignof(_T) : _Strictest::alignment_value;
    class type { alignas(alignment_value) char _data[sizeof(_T) > sizeof(_Strictest::type)
        ? sizeof(_T) : sizeof(_Strictest::type)]; };
};

template<size_t _Length, typename..._Types>
struct aligned_union
  : __aligned_union_base<char[_Length], _Types...>
{};

template<typename..._Types>
struct aligned_union<0, _Types...>
  : __aligned_union_base<_Types...>
{};

template<typename _T>
_T __decay(_T);

template<typename _T, typename = void>
struct __decay_base
  : remove_cv<typename remove_reference<_T>::type>
{};

template<typename _T>
struct __decay_base<_T, __void_t<decltype(__decay(declval<_T>()))>>
{
    typedef decltype(__decay(declval<_T>())) type;
};

template<typename _T>
struct decay
  : __decay_base<_T>
{};

template<typename..._T>
struct common_type
{};

template<typename _T>
struct common_type<_T>
  : common_type<_T, _T>
{};

template<typename, typename, typename = void>
struct __common_type_binary
{};

template<typename _T, typename _U>
struct __common_type_binary<_T, _U, __void_t<decltype(true ? declval<_T>() : declval<_U>())>>
  : decay<decltype(true ? declval<_T>() : declval<_U>())>
{};

template<typename _T, typename _U>
struct common_type<_T, _U>
  : __common_type_binary<typename decay<_T>::type, typename decay<_U>::type>
{};

template<typename...>
struct __common_type_multiary
{};

template<typename _T, typename _U, typename..._V>
struct __common_type_multiary<__void_t<typename common_type<_T, _U>::type>, _T, _U, _V...>
  : common_type<typename common_type<_T, _U>::type, _V...>
{};

template<typename _T, typename _U, typename..._V>
struct common_type<_T, _U, _V...>
  : __common_type_multiary<void, _T, _U, _V...>
{};

template<typename _T>
struct underlying_type
{
    typedef __underlying_type(_T) type;
};

template<typename, typename, typename...>
struct __invoke_result_base;

template<typename _F, typename..._Args>
struct __invoke_result_base<__void_t<decltype(declval<_F>()(declval<_Args>()...))>, _F, _Args...>
{
    typedef decltype(declval<_F>()(declval<_Args>()...)) type;
};

template<typename _F, typename..._Args>
struct __invoke_result
  : __invoke_result_base<void, _F, _Args...>
{};

#if __cplusplus > 201402L
template<typename _F, typename..._Args>
struct invoke_result
  : __invoke_result<_F, _Args...>
{};
#endif

#if __cplusplus <= 202002L
template<typename>
struct result_of;

template<typename _F, typename..._Args>
struct result_of<_F(_Args...)>
  : __invoke_result<_F, _Args...>
{};
#endif

///////////////////////////// Type aliases /////////////////////////////
#if __cplusplus > 201103L

template<bool _Condition, typename _T = void>
using enable_if_t = typename enable_if<_Condition, _T>::type;

template<bool _Condition, typename _T, typename _F>
using conditional_t = typename conditional<_Condition, _T, _F>::type;

template<typename _T>
using add_const_t = const _T;

template<typename _T>
using add_volatile_t = volatile _T;

template<typename _T>
using add_cv_t = const volatile _T;

template<typename _T>
using add_lvalue_reference_t = typename add_lvalue_reference<_T>::type;

template<typename _T>
using add_rvalue_reference_t = typename add_rvalue_reference<_T>::type;

template<typename _T>
using add_pointer_t = typename add_pointer<_T>::type;

template<typename _T>
using remove_const_t = typename remove_const<_T>::type;

template<typename _T>
using remove_volatile_t = typename remove_volatile<_T>::type;

template<typename _T>
using remove_cv_t = typename remove_cv<_T>::type;

template<typename _T>
using remove_reference_t = typename remove_reference<_T>::type;

template<typename _T>
using remove_pointer_t = typename remove_pointer<_T>::type;

template<typename _T>
using remove_extent_t = typename remove_extent<_T>::type;

template<typename _T>
using remove_all_extents_t = typename remove_all_extents<_T>::type;

template<typename _T>
using make_signed_t = typename make_signed<_T>::type;

template<typename _T>
using make_unsigned_t = typename make_unsigned<_T>::type;

template<size_t _Length, size_t _Alignment>
using aligned_storage_t = typename aligned_storage<_Length, _Alignment>::type;

template<size_t _Length, typename..._Types>
using aligned_union_t = typename aligned_union<_Length, _Types...>::type;

template<typename _T>
using decay_t = typename decay<_T>::type;

template<typename... _Types>
using common_type_t = typename common_type<_Types...>::type;

template<typename _T>
using underlying_type_t = typename underlying_type<_T>::type;

#if __cplusplus < 202002L
template<typename _T>
using result_of_t = typename result_of<_T>::type;
#endif
#endif // C++ > 11

#if __cplusplus > 201402L
template<typename...>
using void_t = void;

template<typename _F, typename... _Args>
using invoke_result_t = typename invoke_result<_F, _Args...>::type;
#endif // C++ > 14

///////////////////////////////// Swap /////////////////////////////////

template<typename...>
class tuple;

template<typename>
struct __is_tuple
  : false_type
{};

template<typename... _T>
struct __is_tuple<tuple<_T...>>
  : true_type
{};

template<typename _T>
struct __refers_to_tuple
  : __is_tuple<typename __remove_cvref<_T>::type>
{};

template<typename _T>
typename enable_if<
    !__refers_to_tuple<_T>::value &&
    is_move_constructible<_T>::value &&
    is_move_assignable<_T>::value
>::type swap(_T&, _T&) noexcept(is_nothrow_move_constructible<_T>::value && is_nothrow_move_assignable<_T>::value);

template<typename _T, typename _U, typename = void, typename = void>
struct __swappable_with
  : false_type
{};

template<typename _T, typename _U>
struct __swappable_with<_T, _U, decltype(swap(declval<_T>(), declval<_U>())), decltype(swap(declval<_U>(), declval<_T>()))>
  : true_type
{};

template<typename _T, typename _U, bool = __swappable_with<_T, _U>::value>
struct __nothrow_swappable_with
  : false_type
{};

template<typename _T, typename _U>
struct __nothrow_swappable_with<_T, _U, true>
  : integral_constant<bool, noexcept(swap(declval<_T>(), declval<_U>())) && noexcept(swap(declval<_U>(), declval<_T>()))>
{};

} // namespace std

#endif // <type_traits>

// vim: ft=cpp

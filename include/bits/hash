#ifndef _METALLIC_BITS_HASH
#define _METALLIC_BITS_HASH

#include <limits>
#include <type_traits>

namespace std {

typedef decltype(sizeof(0)) size_t;

template<typename _T>
constexpr __enable_if_t<numeric_limits<_T>::is_integer && is_standard_layout<_T>::value, size_t>
__integer_width(_T = {})
{
    return numeric_limits<_T>::digits + numeric_limits<_T>::is_signed;
}

template<typename _T>
constexpr __enable_if_t<is_standard_layout<_T>::value, size_t>
__occupied_bits(_T = {})
{
    return sizeof(_T) * numeric_limits<unsigned char>::digits;
}

static_assert(__integer_width<size_t>() == __occupied_bits<size_t>(), "size_t with padding bits is unsupported");

template<typename _T>
struct __hash_base
{
    [[deprecated]] typedef _T argument_type;
    [[deprecated]] typedef size_t result_type;
};

template<typename _T>
struct __poisoned_hash : __hash_base<_T>
{
    __poisoned_hash() = delete;
    __poisoned_hash(__poisoned_hash&&) = delete;
    __poisoned_hash& operator=(__poisoned_hash&&) = delete;
};

constexpr size_t __serial_xor(const size_t (&__x)[1])
{
    return *__x;
}

constexpr size_t __serial_xor(const size_t (&__x)[2])
{
    return __x[0] ^ __x[1];
}

constexpr size_t __serial_xor(const size_t (&__x)[3])
{
    return __x[0] ^ __x[1] ^ __x[2];
}

constexpr size_t __serial_xor(const size_t (&__x)[4])
{
    return __x[0] ^ __x[1] ^ __x[2] ^ __x[3];
}

template<size_t _N>
size_t __serial_xor(const size_t (&__x)[_N])
{
    auto __y = reinterpret_cast<const size_t (*)[_N >> 1]>(__x + (_N & 1));
    return (_N & 1) * __x[0] ^ __serial_xor(__y[0]) ^ __serial_xor(__y[1]);
}

template<typename _T, bool _Aligned, size_t _N = sizeof(_T) / sizeof(size_t) + (!_Aligned && sizeof(_T) % sizeof(size_t))>
struct __xor_hash;

template<typename _T>
struct __xor_hash<_T, false, 1> : __hash_base<_T>
{
    size_t operator()(_T __t) const noexcept
    {
        union { _T __x; size_t __y = 0; };
        __x = __t;
        return __y;
    }
};

template<typename _T, size_t _N>
struct __xor_hash<_T, false, _N> : __hash_base<_T>
{
    size_t operator()(_T __t) const noexcept
    {
        union { _T __x; size_t __y[_N] = {}; };
        __x = __t;
        return __serial_xor(__y);
    }
};

template<typename _T>
struct __xor_hash<_T, true, 0> : __xor_hash<_T, false, 1>
{};

template<typename _T>
struct __xor_hash<_T, true, 1> : __hash_base<_T>
{
    size_t operator()(_T __t) const noexcept
    {
        union { _T __x; size_t __y; };
        __x = __t;
        return __y;
    }
};

template<typename _T, size_t _N>
struct __xor_hash<_T, true, _N> : __hash_base<_T>
{
    size_t operator()(_T __t) const noexcept
    {
        union { _T __x; size_t __y[_N]; };
        __x = __t;
        return __serial_xor(__y);
    }
};

template<typename _T>
struct __identity_hash : __hash_base<_T>
{
    size_t operator()(_T __x) const noexcept { return __x; }
};

template<typename _T>
using __integer_hash = __conditional_t<__integer_width<_T>() <= __integer_width<size_t>(),
    __identity_hash<_T>,
    __xor_hash<_T, __integer_width<_T>() == __occupied_bits<_T>() && !(__integer_width<_T>() % __integer_width<size_t>())>>;

template<typename> struct hash;

template<> struct hash<bool> : __integer_hash<bool> {};
template<> struct hash<char> : __integer_hash<char> {};
template<> struct hash<signed char> : __integer_hash<signed char> {};
template<> struct hash<unsigned char> : __integer_hash<unsigned char> {};
template<> struct hash<char16_t> : __integer_hash<char16_t> {};
template<> struct hash<char32_t> : __integer_hash<char32_t> {};
template<> struct hash<wchar_t> : __integer_hash<wchar_t> {};
template<> struct hash<short> : __integer_hash<short> {};
template<> struct hash<unsigned short> : __integer_hash<unsigned short> {};
template<> struct hash<int> : __integer_hash<int> {};
template<> struct hash<unsigned> : __integer_hash<unsigned> {};
template<> struct hash<long> : __integer_hash<long> {};
template<> struct hash<unsigned long> : __integer_hash<unsigned long> {};

#if __cplulsplus > 201703L
template<> struct hash<char8_t> : __integer_hash<char8_t> {};
#endif

template<> struct hash<long long> : __integer_hash<long long> {};
template<> struct hash<unsigned long long> : __integer_hash<unsigned long long> {};
#ifdef __SIZEOF_INT128__
__extension__ template<> struct hash<__int128> : __integer_hash<__int128> {};
__extension__ template<> struct hash<unsigned __int128> : __integer_hash<unsigned __int128> {};
#endif

template<typename _T, bool _Aligned =
    numeric_limits<_T>::is_iec559 &&
    (numeric_limits<_T>::digits & (numeric_limits<_T>::digits - 1)) &&
    !(numeric_limits<size_t>::digits & (numeric_limits<size_t>::digits - 1))>
struct __fp_hash
{
    size_t operator()(_T __t) const noexcept { return __t ? __xor_hash<_T, _Aligned>()(__t) : 0; }
};

template<> struct hash<float> : __fp_hash<float> {};
template<> struct hash<double> : __fp_hash<double> {};
template<> struct hash<long double> : __fp_hash<long double> {};

#ifdef __SIZEOF_FLOAT128__
__extension__ template<> struct hash<__float128> : __fp_hash<__float128, !(128 % numeric_limits<size_t>::digits)> {};
#endif

#if __cplusplus > 201402L
template<> struct hash<decltype(nullptr)> : __hash_base<decltype(nullptr)>
{
    size_t operator()(decltype(nullptr)) const noexcept { return 0; }
};
#endif

template<typename _T>
struct hash<_T*> : __hash_base<_T*>
{
    size_t operator()(_T* __x) const noexcept { return reinterpret_cast<size_t>(__x); }
};

template<typename _T, bool = is_enum<_T>::value>
struct __enum_hash : __hash_base<_T>
{
    size_t operator()(_T __x) const noexcept
    {
        typedef typename underlying_type<_T>::type _U;
        return hash<_U>()(static_cast<_U>(__x));
    }
};

template<typename _T>
struct __enum_hash<_T, false> : __poisoned_hash<_T>
{};

template<typename _T>
struct hash : __enum_hash<_T>
{};

} // std

#endif // <bits/hash>

// vim: ft=cpp

#ifndef _METALLIC_FUNCTIONAL
#define _METALLIC_FUNCTIONAL

#include <bits/hash>

namespace std {
namespace placeholders {

template<int> class __placeholder {};

constexpr __placeholder<1> _1 = {};
constexpr __placeholder<2> _2 = {};
constexpr __placeholder<3> _3 = {};
constexpr __placeholder<4> _4 = {};
constexpr __placeholder<5> _5 = {};
constexpr __placeholder<6> _6 = {};
constexpr __placeholder<7> _7 = {};
constexpr __placeholder<8> _8 = {};
constexpr __placeholder<9> _9 = {};

} // std::placeholders

template<typename>
struct is_placeholder
  : integral_constant<int, 0>
{};

template<int _N>
struct is_placeholder<placeholders::__placeholder<_N>>
  : integral_constant<int, _N>
{};

template<typename _T>
class reference_wrapper
{
    static constexpr _T* __addr(_T& __x) noexcept { return __builtin_addressof(__x); }
    static void __addr(_T&&) = delete;

    _T* __data;

public:
    typedef _T type;

    template<typename _U, typename = __enable_if_t<!is_same<reference_wrapper, __remove_cvref_t<_U>>::value,
        decltype((__addr)(declval<_U>()))>>
    reference_wrapper(_U&& __other) noexcept(noexcept((__addr)(declval<_U>())))
      : __data((__addr)(static_cast<_U&&>(__other)))
    {}

    reference_wrapper(const reference_wrapper&) = default;
    reference_wrapper& operator=(const reference_wrapper&) = default;

    _T& get() const noexcept { return *__data; }
    operator _T&() const noexcept { return get(); }

    template<typename..._Args>
    typename __invoke_result<_T&, _Args...>::type operator()(_Args&&... __args)
    {
        return std::__invoke(get(), static_cast<_Args&&>(__args)...);
    }
};

template<typename _T>
reference_wrapper<_T> ref(_T& __x)
{
    return __x;
}

template<typename _T>
reference_wrapper<_T> ref(reference_wrapper<_T> __x)
{
    return __x;
}

template<typename _T>
void ref(const _T&&) = delete;

template<typename _T>
reference_wrapper<const _T> cref(const _T& __x)
{
    return __x;
}

template<typename _T>
reference_wrapper<const _T> cref(reference_wrapper<_T> __x)
{
    return __x;
}

template<typename _T>
void cref(const _T&&) = delete;

template<typename _Base, typename _T>
constexpr __enable_if_t<is_base_of<_Base, typename decay<_T>::type>::value, _T&&>
__invoke_dereference(_T&& __x) noexcept
{
    return static_cast<_T&&>(__x);
}

template<typename _Base, typename _T>
constexpr _T& __invoke_dereference(reference_wrapper<_T> __x) noexcept
{
    return __x;
}

template<typename _Base, typename _T>
constexpr __enable_if_t<!is_base_of<_Base, typename decay<_T>::type>::value, decltype(*declval<_T>())>
__invoke_dereference(_T&& __x) noexcept(noexcept(*declval<_T>()))
{
    return *static_cast<_T&&>(__x);
}

template<typename _T, typename _Base, typename _U>
constexpr auto __invoke(_T _Base::* __x, _U&& __y)
noexcept(noexcept(__invoke_dereference<_Base>(declval<_U>()).*__x)) ->
__enable_if_t<!is_function<_T>::value, decltype(__invoke_dereference<_Base>(declval<_U>()).*__x)>
{
    return __invoke_dereference<_Base>(static_cast<_U&&>(__y)).*__x;
}

template<typename _T, typename _Base, typename _U, typename..._Args>
constexpr auto __invoke(_T _Base::* __x, _U&& __y, _Args&&... __args)
noexcept(noexcept((__invoke_dereference<_Base>(declval<_U>()).*__x)(declval<_Args>()...))) ->
__enable_if_t<is_function<_T>::value, decltype((__invoke_dereference<_Base>(declval<_U>()).*__x)(declval<_Args>()...))>
{
    return (__invoke_dereference<_Base>(static_cast<_U&&>(__y)).*__x)(static_cast<_Args&&>(__args)...);
}

template<typename _F, typename..._Args>
constexpr decltype(declval<_F>()(declval<_Args>()...))
__invoke(_F&& __f, _Args&&... __args)
noexcept(noexcept(declval<_F>()(declval<_Args>()...)))
{
    return static_cast<_F&&>(__f)(static_cast<_Args&&>(__args)...);
}

#if __cplusplus > 201402L
template<typename _F, typename..._Args>
constexpr decltype(__invoke(declval<_F>(), declval<_Args>()...))
invoke(_F&& __f, _Args&&... __args)
noexcept(noexcept(__invoke(declval<_F>(), declval<_Args>()...)))
{
    return __invoke(static_cast<_F&&>(__f), static_cast<_Args&&>(__args)...);
}
#endif

template<typename _T = void>
struct plus
{
    constexpr _T operator()(const _T& __x, const _T& __y) const noexcept(noexcept(__x + __y))
    {
        return __x + __y;
    }
};

#if __cplusplus > 201103L
template<>
struct plus<void>
{
    template<typename _T, typename _U>
    constexpr auto operator()(_T&& __x, _U&& __y) const noexcept(noexcept(declval<_T>() + declval<_U>()))
    {
        return static_cast<_T&&>(__x) + static_cast<_U&&>(__y);
    }
};
#endif

} // std

#endif // <functional>

// vim: ft=cpp
